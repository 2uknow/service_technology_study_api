{
	"info": {
		"_postman_id": "423af47d-743d-4390-a355-539b9353607c",
		"name": "Danal_Uas_v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24140936",
		"_collection_link": "https://red-escape-704404.postman.co/workspace/Team-Workspace~a1f4d6b2-7a17-4360-8a8d-46313f959e2b/collection/24140936-423af47d-743d-4390-a355-539b9353607c?action=share&source=collection_link&creator=24140936"
	},
	"item": [
		{
			"name": "SKT",
			"item": [
				{
					"name": "가맹점 정보 확인 (ITEMSEND)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=ITEMSEND&SERVICE=UAS&AUTHTYPE=36&TARGETURL&CPID=B010010334&CPPWD=teleditcom&ORDERID&USERID&AGELIMIT",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "ITEMSEND"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "AUTHTYPE",
									"value": "36"
								},
								{
									"key": "TARGETURL",
									"value": null
								},
								{
									"key": "CPID",
									"value": "B010010334"
								},
								{
									"key": "CPPWD",
									"value": "teleditcom"
								},
								{
									"key": "ORDERID",
									"value": null
								},
								{
									"key": "USERID",
									"value": null
								},
								{
									"key": "AGELIMIT",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "본인정보 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 URL(CPURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.CPURL).to.eql(\"www.teledit.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"SK 인증 보호 서비스 가입자 여부(SKAPS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.SKAPS).to.eql(\"N\")\r",
									"});\r",
									"\r",
									"pm.test(\"휴대폰 번호 보호 서비스 가입자 여부(PNS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.PNS).to.eql(\"N\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&PHONE=01079266634&IDEN=9002051&IPADDR=10.10.52.70&CARRIER=SKT&NAME=%EA%B9%80%ED%83%9C%EC%9A%B1&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "PHONE",
									"value": "01079266634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "IPADDR",
									"value": "10.10.52.70"
								},
								{
									"key": "CARRIER",
									"value": "SKT"
								},
								{
									"key": "NAME",
									"value": "%EA%B9%80%ED%83%9C%EC%9A%B1"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OTP 인증 (REPORT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == 0000) { // 인증번호 일치한 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1710) { // 인증번호 불일치인 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1710\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증번호 불일치로 실패하였습니다. 입력하신 정보를 다시 확인해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1622) { // 인증 시간 초과한 경우(SMS OTP 인증 7분 제한)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1622\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 시간 초과로 거래가 자동취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1611) { // ID_TX 중복 에러\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1611\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 일시적인 오류로 인증 실패하였습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 5401) { // 인증 실패, SMS/MMS/PUSH발송실패 (등록되지 않은 CTN)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"5401\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 입력하신 정보가 올바르지 않습니다. 다시 입력하여 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"기타 오류 발생(TID:\"+pm.environment.get(\"TID\")+\")\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=REPORT&TID={{TID}}&OTP=432846",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "REPORT"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "OTP",
									"value": "432846"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "확인 (CONFIRM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == \"9992\") { // 인증 절차 미완료 (이전 시나리오 미인증으로 해당 검증 진행)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9992\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 절차를 모두 거치지 않아 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 0000) {  // 정상 본인 인증\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    // byteCount 함수는 문자열의 각 문자를 순회하며, 해당 문자가 UTF-8에서 몇 바이트로 인코딩되는지를 계산 \r",
									"    function byteCount(str) {\r",
									"        let count = 0;\r",
									"        for (let i = 0; i < str.length; i++) {\r",
									"            let charCode = str.charCodeAt(i);\r",
									"            if (charCode <= 0x7f) {\r",
									"            count += 1;\r",
									"            } else if (charCode <= 0x7ff) {\r",
									"            count += 2;\r",
									"            } else if (charCode <= 0xffff) {\r",
									"            count += 3;\r",
									"            } else {\r",
									"            count += 4;\r",
									"            }\r",
									"        }\r",
									"        return count;\r",
									"    }\r",
									"\r",
									"    pm.test(\"본인인증 고유 키(CI) 정상 출력\", function () {\r",
									"        let str = parsed.CI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(88)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 이름(NAME) 정상 출력\", function () {\r",
									"        pm.expect(parsed.NAME).to.eql(\"김태욱\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 주문번호(ORDERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.ORDERID).to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"가입 통신사(CARRIER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.CARRIER).to.eql(\"SKT\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"내/외국인 여부(FOREIGNER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.FOREIGNER).to.eql(\"0\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"SITE 연계 정보(DI) 정상 출력\", function () {\r",
									"        let str = parsed.DI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(64)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 생년월일(IDEN) 정상 출력\", function () {\r",
									"        pm.expect(parsed.IDEN).to.eql(\"9002051\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 ID(USERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.USERID).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    // 마지막에 테스트 실패 처리\r",
									"    pm.test(\"실패 처리: 시간 지연으로 인한 인증 실패\", function () {\r",
									"        throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다. 시간 지연으로 인증이 실패하였습니다.\");\r",
									"    });\r",
									"} else {\r",
									"    throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다.\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=CONFIRM&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "CONFIRM"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "CONFIRMOPTION",
									"value": "1",
									"disabled": true
								},
								{
									"key": "CPID",
									"value": "B010010334",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KT",
			"item": [
				{
					"name": "가맹점 정보 확인 (ITEMSEND)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=ITEMSEND&SERVICE=UAS&AUTHTYPE=36&TARGETURL&CPID=B010010334&CPPWD=teleditcom&ORDERID&USERID&AGELIMIT",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "ITEMSEND"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "AUTHTYPE",
									"value": "36"
								},
								{
									"key": "TARGETURL",
									"value": null
								},
								{
									"key": "CPID",
									"value": "B010010334"
								},
								{
									"key": "CPPWD",
									"value": "teleditcom"
								},
								{
									"key": "ORDERID",
									"value": null
								},
								{
									"key": "USERID",
									"value": null
								},
								{
									"key": "AGELIMIT",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "본인정보 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 URL(CPURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.CPURL).to.eql(\"www.teledit.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"SK 인증 보호 서비스 가입자 여부(SKAPS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.SKAPS).to.eql(\"N\")\r",
									"});\r",
									"\r",
									"pm.test(\"휴대폰 번호 보호 서비스 가입자 여부(PNS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.PNS).to.eql(\"N\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&PHONE=01097966634&IDEN=9707162&IPADDR=10.10.52.70&CARRIER=KT&NAME=김효연&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "PHONE",
									"value": "01097966634"
								},
								{
									"key": "IDEN",
									"value": "9707162"
								},
								{
									"key": "IPADDR",
									"value": "10.10.52.70"
								},
								{
									"key": "CARRIER",
									"value": "KT"
								},
								{
									"key": "NAME",
									"value": "김효연"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OTP 인증 (REPORT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == 0000) { // 인증번호 일치한 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1710) { // 인증번호 불일치인 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1710\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증번호 불일치로 실패하였습니다. 입력하신 정보를 다시 확인해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1622) { // 인증 시간 초과한 경우(SMS OTP 인증 7분 제한)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1622\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 시간 초과로 거래가 자동취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1611) { // ID_TX 중복 에러\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1611\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 일시적인 오류로 인증 실패하였습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 5401) { // 인증 실패, SMS/MMS/PUSH발송실패 (등록되지 않은 CTN)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"5401\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 입력하신 정보가 올바르지 않습니다. 다시 입력하여 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"기타 오류 발생(TID:\"+pm.environment.get(\"TID\")+\")\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=REPORT&TID={{TID}}&OTP=109274",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "REPORT"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "OTP",
									"value": "109274"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "확인 (CONFIRM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == \"9992\") { // 인증 절차 미완료 (이전 시나리오 미인증으로 해당 검증 진행)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9992\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 절차를 모두 거치지 않아 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 0000) {  // 정상 본인 인증\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // byteCount 함수는 문자열의 각 문자를 순회하며, 해당 문자가 UTF-8에서 몇 바이트로 인코딩되는지를 계산 \r",
									"    function byteCount(str) {\r",
									"        let count = 0;\r",
									"        for (let i = 0; i < str.length; i++) {\r",
									"            let charCode = str.charCodeAt(i);\r",
									"            if (charCode <= 0x7f) {\r",
									"            count += 1;\r",
									"            } else if (charCode <= 0x7ff) {\r",
									"            count += 2;\r",
									"            } else if (charCode <= 0xffff) {\r",
									"            count += 3;\r",
									"            } else {\r",
									"            count += 4;\r",
									"            }\r",
									"        }\r",
									"        return count;\r",
									"    }\r",
									"\r",
									"    pm.test(\"본인인증 고유 키(CI) 정상 출력\", function () {\r",
									"        let str = parsed.CI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(88)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 이름(NAME) 정상 출력\", function () {\r",
									"        pm.expect(parsed.NAME).to.eql(\"김태욱\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 주문번호(ORDERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.ORDERID).to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"가입 통신사(CARRIER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.CARRIER).to.eql(\"SKT\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"내/외국인 여부(FOREIGNER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.FOREIGNER).to.eql(\"0\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"SITE 연계 정보(DI) 정상 출력\", function () {\r",
									"        let str = parsed.DI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(64)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 생년월일(IDEN) 정상 출력\", function () {\r",
									"        pm.expect(parsed.IDEN).to.eql(\"9002051\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 ID(USERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.USERID).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // 마지막에 테스트 실패 처리\r",
									"    pm.test(\"실패 처리: 시간 지연으로 인한 인증 실패\", function () {\r",
									"        throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다. 시간 지연으로 인증이 실패하였습니다.\");\r",
									"    });\r",
									"} else {\r",
									"    throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다.\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=CONFIRM&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "CONFIRM"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "CONFIRMOPTION",
									"value": "1",
									"disabled": true
								},
								{
									"key": "CPID",
									"value": "B010010334",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LGT",
			"item": [
				{
					"name": "가맹점 정보 확인 (ITEMSEND)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=ITEMSEND&SERVICE=UAS&AUTHTYPE=36&TARGETURL&CPID=B010010334&CPPWD=teleditcom&ORDERID&USERID&AGELIMIT",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "ITEMSEND"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "AUTHTYPE",
									"value": "36"
								},
								{
									"key": "TARGETURL",
									"value": null
								},
								{
									"key": "CPID",
									"value": "B010010334"
								},
								{
									"key": "CPPWD",
									"value": "teleditcom"
								},
								{
									"key": "ORDERID",
									"value": null
								},
								{
									"key": "USERID",
									"value": null
								},
								{
									"key": "AGELIMIT",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "본인정보 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 URL(CPURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.CPURL).to.eql(\"www.teledit.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"SK 인증 보호 서비스 가입자 여부(SKAPS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.SKAPS).to.eql(\"N\")\r",
									"});\r",
									"\r",
									"pm.test(\"휴대폰 번호 보호 서비스 가입자 여부(PNS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.PNS).to.eql(\"N\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&PHONE=01076746634&IDEN=9002051&IPADDR=10.10.52.70&CARRIER=LGT&NAME=김태욱&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "PHONE",
									"value": "01076746634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "IPADDR",
									"value": "10.10.52.70"
								},
								{
									"key": "CARRIER",
									"value": "LGT"
								},
								{
									"key": "NAME",
									"value": "김태욱"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OTP 인증 (REPORT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == 0000) { // 인증번호 일치한 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1710) { // 인증번호 불일치인 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1710\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증번호 불일치로 실패하였습니다. 입력하신 정보를 다시 확인해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1622) { // 인증 시간 초과한 경우(SMS OTP 인증 7분 제한)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1622\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 시간 초과로 거래가 자동취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1611) { // ID_TX 중복 에러\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1611\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 일시적인 오류로 인증 실패하였습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 5401) { // 인증 실패, SMS/MMS/PUSH발송실패 (등록되지 않은 CTN)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"5401\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 입력하신 정보가 올바르지 않습니다. 다시 입력하여 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"기타 오류 발생(TID:\"+pm.environment.get(\"TID\")+\")\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=REPORT&TID={{TID}}&OTP=188585",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "REPORT"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "OTP",
									"value": "188585"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "확인 (CONFIRM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == \"9992\") { // 인증 절차 미완료 (이전 시나리오 미인증으로 해당 검증 진행)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9992\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 절차를 모두 거치지 않아 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 0000) {  // 정상 본인 인증\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // byteCount 함수는 문자열의 각 문자를 순회하며, 해당 문자가 UTF-8에서 몇 바이트로 인코딩되는지를 계산 \r",
									"    function byteCount(str) {\r",
									"        let count = 0;\r",
									"        for (let i = 0; i < str.length; i++) {\r",
									"            let charCode = str.charCodeAt(i);\r",
									"            if (charCode <= 0x7f) {\r",
									"            count += 1;\r",
									"            } else if (charCode <= 0x7ff) {\r",
									"            count += 2;\r",
									"            } else if (charCode <= 0xffff) {\r",
									"            count += 3;\r",
									"            } else {\r",
									"            count += 4;\r",
									"            }\r",
									"        }\r",
									"        return count;\r",
									"    }\r",
									"\r",
									"    pm.test(\"본인인증 고유 키(CI) 정상 출력\", function () {\r",
									"        let str = parsed.CI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(88)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 이름(NAME) 정상 출력\", function () {\r",
									"        pm.expect(parsed.NAME).to.eql(\"김태욱\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 주문번호(ORDERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.ORDERID).to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"가입 통신사(CARRIER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.CARRIER).to.eql(\"SKT\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"내/외국인 여부(FOREIGNER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.FOREIGNER).to.eql(\"0\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"SITE 연계 정보(DI) 정상 출력\", function () {\r",
									"        let str = parsed.DI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(64)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 생년월일(IDEN) 정상 출력\", function () {\r",
									"        pm.expect(parsed.IDEN).to.eql(\"9002051\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 ID(USERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.USERID).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // 마지막에 테스트 실패 처리\r",
									"    pm.test(\"실패 처리: 시간 지연으로 인한 인증 실패\", function () {\r",
									"        throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다. 시간 지연으로 인증이 실패하였습니다.\");\r",
									"    });\r",
									"} else {\r",
									"    throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다.\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=CONFIRM&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "CONFIRM"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "CONFIRMOPTION",
									"value": "1",
									"disabled": true
								},
								{
									"key": "CPID",
									"value": "B010010334",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KT_MVNO",
			"item": [
				{
					"name": "가맹점 정보 확인 (ITEMSEND)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=ITEMSEND&SERVICE=UAS&AUTHTYPE=36&TARGETURL&CPID=B010010334&CPPWD=teleditcom&ORDERID&USERID&AGELIMIT",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "ITEMSEND"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "AUTHTYPE",
									"value": "36"
								},
								{
									"key": "TARGETURL",
									"value": null
								},
								{
									"key": "CPID",
									"value": "B010010334"
								},
								{
									"key": "CPPWD",
									"value": "teleditcom"
								},
								{
									"key": "ORDERID",
									"value": null
								},
								{
									"key": "USERID",
									"value": null
								},
								{
									"key": "AGELIMIT",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MVNO 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과에 대한 메세지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// LGU+만 해당 필드 출력됨\r",
									"pm.test(\"정보제공 동의 여부(INFOAGREE) 미출력\", function () {\r",
									"    pm.expect(parsed.INFOAGREE).to.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"알뜰폰 업체명(MVNONAME) 정상 출력\", function () {\r",
									"    pm.expect(parsed.MVNONAME).to.eql(\"kt M모바일\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&SUBTXTYPE=MVNOCHECK&SERVICE=UAS&CARRIER=KT&NAME=김태욱&PHONE=01026116634&IDEN=9002051&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "SUBTXTYPE",
									"value": "MVNOCHECK"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "CARRIER",
									"value": "KT"
								},
								{
									"key": "NAME",
									"value": "김태욱"
								},
								{
									"key": "PHONE",
									"value": "01026116634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "본인정보 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 URL(CPURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.CPURL).to.eql(\"www.teledit.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"SK 인증 보호 서비스 가입자 여부(SKAPS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.SKAPS).to.eql(\"N\")\r",
									"});\r",
									"\r",
									"pm.test(\"휴대폰 번호 보호 서비스 가입자 여부(PNS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.PNS).to.eql(\"N\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&PHONE=01026116634&IDEN=9002051&IPADDR=10.10.52.70&CARRIER=KT&NAME=김태욱&TID={{TID}}&SUBTXTYPE=MVNODELIVER",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "PHONE",
									"value": "01026116634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "IPADDR",
									"value": "10.10.52.70"
								},
								{
									"key": "CARRIER",
									"value": "KT"
								},
								{
									"key": "NAME",
									"value": "김태욱"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "SUBTXTYPE",
									"value": "MVNODELIVER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OTP 인증 (REPORT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == 0000) { // 인증번호 일치한 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 3431) { // 인증번호 불일치인 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"3431\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증번호 불일치로 실패하였습니다. 입력하신 정보를 다시 확인해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1622) { // 인증 시간 초과한 경우(SMS OTP 인증 7분 제한)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1622\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 시간 초과로 거래가 자동취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1611) { // ID_TX 중복 에러\r",
									"test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1611\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 일시적인 오류로 인증 실패하였습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 5401) { // 인증 실패, SMS/MMS/PUSH발송실패 (등록되지 않은 CTN)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(RETURNCODE), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"5401\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 입력하신 정보가 올바르지 않습니다. 다시 입력하여 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(RETURNCODE), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"기타 오류 발생(TID:\"+pm.environment.get(\"TID\")+\")\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=REPORT&TID={{TID}}&OTP=944784",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "REPORT"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "OTP",
									"value": "944784"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "확인 (CONFIRM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == \"9992\") { // 인증 절차 미완료 (이전 시나리오 미인증으로 해당 검증 진행)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9992\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 절차를 모두 거치지 않아 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 0000) {  // 정상 본인 인증\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // byteCount 함수는 문자열의 각 문자를 순회하며, 해당 문자가 UTF-8에서 몇 바이트로 인코딩되는지를 계산 \r",
									"    function byteCount(str) {\r",
									"        let count = 0;\r",
									"        for (let i = 0; i < str.length; i++) {\r",
									"            let charCode = str.charCodeAt(i);\r",
									"            if (charCode <= 0x7f) {\r",
									"            count += 1;\r",
									"            } else if (charCode <= 0x7ff) {\r",
									"            count += 2;\r",
									"            } else if (charCode <= 0xffff) {\r",
									"            count += 3;\r",
									"            } else {\r",
									"            count += 4;\r",
									"            }\r",
									"        }\r",
									"        return count;\r",
									"    }\r",
									"\r",
									"    pm.test(\"본인인증 고유 키(CI) 정상 출력\", function () {\r",
									"        let str = parsed.CI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(88)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 이름(NAME) 정상 출력\", function () {\r",
									"        pm.expect(parsed.NAME).to.eql(\"김태욱\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 주문번호(ORDERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.ORDERID).to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"가입 통신사(CARRIER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.CARRIER).to.eql(\"SKT\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"내/외국인 여부(FOREIGNER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.FOREIGNER).to.eql(\"0\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"SITE 연계 정보(DI) 정상 출력\", function () {\r",
									"        let str = parsed.DI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(64)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 생년월일(IDEN) 정상 출력\", function () {\r",
									"        pm.expect(parsed.IDEN).to.eql(\"9002051\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 ID(USERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.USERID).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.not.be.undefined;\r",
									"        pm.expect(parsed.TID).to.not.be.empty;\r",
									"        pm.expect(parsed.TID).to.not.be.null;\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // 마지막에 테스트 실패 처리\r",
									"    pm.test(\"실패 처리: 시간 지연으로 인한 인증 실패\", function () {\r",
									"        throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다. 시간 지연으로 인증이 실패하였습니다.\");\r",
									"    });\r",
									"} else {\r",
									"    throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다.\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=CONFIRM&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "CONFIRM"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "CONFIRMOPTION",
									"value": "1",
									"disabled": true
								},
								{
									"key": "CPID",
									"value": "B010010334",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LGT_MVNO",
			"item": [
				{
					"name": "가맹점 정보 확인 (ITEMSEND)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=ITEMSEND&SERVICE=UAS&AUTHTYPE=36&TARGETURL&CPID=B010010334&CPPWD=teleditcom&ORDERID&USERID&AGELIMIT",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "ITEMSEND"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "AUTHTYPE",
									"value": "36"
								},
								{
									"key": "TARGETURL",
									"value": null
								},
								{
									"key": "CPID",
									"value": "B010010334"
								},
								{
									"key": "CPPWD",
									"value": "teleditcom"
								},
								{
									"key": "ORDERID",
									"value": null
								},
								{
									"key": "USERID",
									"value": null
								},
								{
									"key": "AGELIMIT",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MVNO 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과에 대한 메세지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"정보제공 동의 여부(INFOAGREE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.INFOAGREE).to.eql(\"Y\")\r",
									"});\r",
									"\r",
									"pm.test(\"알뜰폰 업체명(MVNONAME) 정상 출력\", function () {\r",
									"    pm.expect(parsed.MVNONAME).to.eql(\"(주)미디어로그(U+유모바일)\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&SUBTXTYPE=MVNOCHECK&SERVICE=UAS&CARRIER=LGT&NAME=김태욱&PHONE=01081896634&IDEN=9002051&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "SUBTXTYPE",
									"value": "MVNOCHECK"
								},
								{
									"key": "SERVICE",
									"value": "UAS"
								},
								{
									"key": "CARRIER",
									"value": "LGT"
								},
								{
									"key": "NAME",
									"value": "김태욱"
								},
								{
									"key": "PHONE",
									"value": "01081896634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "본인정보 확인 (DELIVER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Reponse Data 확인\r",
									"pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 URL(CPURL) 정상 출력\", function () {\r",
									"    pm.expect(parsed.CPURL).to.eql(\"www.teledit.com\")\r",
									"});\r",
									"\r",
									"pm.test(\"SK 인증 보호 서비스 가입자 여부(SKAPS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.SKAPS).to.eql(\"N\")\r",
									"});\r",
									"\r",
									"pm.test(\"휴대폰 번호 보호 서비스 가입자 여부(PNS) 정상 출력\", function () {\r",
									"    pm.expect(parsed.PNS).to.eql(\"N\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{uas-web}}?TXTYPE=DELIVER&PHONE=01081896634&IDEN=9002051&IPADDR=10.10.52.70&CARRIER=LGT&NAME=김태욱&TID={{TID}}&SUBTXTYPE=MVNODELIVER",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "DELIVER"
								},
								{
									"key": "PHONE",
									"value": "01081896634"
								},
								{
									"key": "IDEN",
									"value": "9002051"
								},
								{
									"key": "IPADDR",
									"value": "10.10.52.70"
								},
								{
									"key": "CARRIER",
									"value": "LGT"
								},
								{
									"key": "NAME",
									"value": "김태욱"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "SUBTXTYPE",
									"value": "MVNODELIVER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OTP 인증 (REPORT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == 0000) { // 인증번호 일치한 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1710) { // 인증번호 불일치인 경우\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1710\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증번호 불일치로 실패하였습니다. 입력하신 정보를 다시 확인해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1622) { // 인증 시간 초과한 경우(SMS OTP 인증 7분 제한)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1622\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 시간 초과로 거래가 자동취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 1611) { // ID_TX 중복 에러\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"1611\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 일시적인 오류로 인증 실패하였습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 5401) { // 인증 실패, SMS/MMS/PUSH발송실패 (등록되지 않은 CTN)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"5401\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 입력하신 정보가 올바르지 않습니다. 다시 입력하여 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 인증 완료(CPCGI) 페이지 URL(TARGETURL) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TARGETURL).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"기타 오류 발생(TID:\"+pm.environment.get(\"TID\")+\")\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=REPORT&TID={{TID}}&OTP=475103",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "REPORT"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "OTP",
									"value": "475103"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "확인 (CONFIRM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 응답을 문자열로 변환\r",
									"let response = pm.response.text();\r",
									"\r",
									"/**********     Assertion     **********/\r",
									"// HTTP 응답 코드 확인\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 문자열을 파싱하여 key-value 형태로 변환\r",
									"let parsed = {};\r",
									"response.split('&').forEach(pair => {\r",
									"    let [key, value] = pair.split('=');\r",
									"    parsed[key] = decodeURIComponent(value || '');\r",
									"});\r",
									"\r",
									"// Environments에 저장\r",
									"pm.environment.set(\"RETURNMSG\", parsed.RETURNMSG)\r",
									"pm.environment.set(\"RETURNCODE\", parsed.RETURNCODE)\r",
									"\r",
									"// Reponse Data 확인\r",
									"if (parsed.RETURNCODE == \"9992\") { // 인증 절차 미완료 (이전 시나리오 미인증으로 해당 검증 진행)\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) : \" + pm.environment.get(\"RETURNCODE\"), function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9992\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) : \" + pm.environment.get(\"RETURNMSG\"), function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 인증 절차를 모두 거치지 않아 자동 취소되었습니다. 다시 시도해 주십시오.\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 0000) {  // 정상 본인 인증\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 정상 출력\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"No information\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // byteCount 함수는 문자열의 각 문자를 순회하며, 해당 문자가 UTF-8에서 몇 바이트로 인코딩되는지를 계산 \r",
									"    function byteCount(str) {\r",
									"        let count = 0;\r",
									"        for (let i = 0; i < str.length; i++) {\r",
									"            let charCode = str.charCodeAt(i);\r",
									"            if (charCode <= 0x7f) {\r",
									"            count += 1;\r",
									"            } else if (charCode <= 0x7ff) {\r",
									"            count += 2;\r",
									"            } else if (charCode <= 0xffff) {\r",
									"            count += 3;\r",
									"            } else {\r",
									"            count += 4;\r",
									"            }\r",
									"        }\r",
									"        return count;\r",
									"    }\r",
									"\r",
									"    pm.test(\"본인인증 고유 키(CI) 정상 출력\", function () {\r",
									"        let str = parsed.CI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(88)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 이름(NAME) 정상 출력\", function () {\r",
									"        pm.expect(parsed.NAME).to.eql(\"김태욱\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"가맹점 주문번호(ORDERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.ORDERID).to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"가입 통신사(CARRIER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.CARRIER).to.eql(\"SKT\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"내/외국인 여부(FOREIGNER) 정상 출력\", function () {\r",
									"        pm.expect(parsed.FOREIGNER).to.eql(\"0\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"SITE 연계 정보(DI) 정상 출력\", function () {\r",
									"        let str = parsed.DI\r",
									"        pm.expect(byteCount(str)).to.be.at.most(64)\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 생년월일(IDEN) 정상 출력\", function () {\r",
									"        pm.expect(parsed.IDEN).to.eql(\"9002051\")\r",
									"    });\r",
									"\r",
									"    pm.test(\"사용자 ID(USERID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.USERID).to.be.empty;\r",
									"    });\r",
									"} else if (parsed.RETURNCODE == 9995) { // 시간 지연\r",
									"    pm.test(\"거래 결과 코드(RETURNCODE) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNCODE).to.eql(\"9995\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 결과 메시지(RETURNMSG) 확인\", function () {\r",
									"        pm.expect(parsed.RETURNMSG).to.eql(\"[인증실패] 시간 지연으로 거래가 자동 취소되었습니다. 다시 시도해 주십시오.\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"거래 TID(TID) 정상 출력\", function () {\r",
									"        pm.expect(parsed.TID).to.eql(pm.environment.get(\"TID\"))\r",
									"        pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    });\r",
									"\r",
									"    // 마지막에 테스트 실패 처리\r",
									"    pm.test(\"실패 처리: 시간 지연으로 인한 인증 실패\", function () {\r",
									"        throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다. 시간 지연으로 인증이 실패하였습니다.\");\r",
									"    });\r",
									"} else {\r",
									"    throw new Error(\"거래 결과 코드(RETURNCODE)가 \" + pm.environment.get(\"RETURNCODE\") + \"입니다.\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{uas-web}}?TXTYPE=CONFIRM&TID={{TID}}",
							"host": [
								"{{uas-web}}"
							],
							"query": [
								{
									"key": "TXTYPE",
									"value": "CONFIRM"
								},
								{
									"key": "TID",
									"value": "{{TID}}"
								},
								{
									"key": "CONFIRMOPTION",
									"value": "1",
									"disabled": true
								},
								{
									"key": "CPID",
									"value": "B010010334",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}