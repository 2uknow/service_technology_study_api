{
	"info": {
		"_postman_id": "ad14dfb9-75d7-4a97-85bf-8665f83ae3c1",
		"name": "Danal_CreditRebill_v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24140936",
		"_collection_link": "https://red-escape-704404.postman.co/workspace/Team-Workspace~a1f4d6b2-7a17-4360-8a8d-46313f959e2b/collection/24140936-ad14dfb9-75d7-4a97-85bf-8665f83ae3c1?action=share&source=collection_link&creator=24140936"
	},
	"item": [
		{
			"name": "CP 및 정기결제 요청 전송",
			"item": [
				{
					"name": "READY - BATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"// 파싱 및 개별 디코딩\r",
									"const parsed = parseQueryString(result);\r",
									"const startUrlDecoded = safeDecodeURIComponent(parsed.STARTURL);\r",
									"console.log(\"STARTURL(디코딩):\", startUrlDecoded);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메시지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"정기결제 초기인증 표준페이지 시작 URL(STARTURL) 정상출력\", function () {\r",
									"    pm.expect(startUrlDecoded).to.eql(\"https://checkout.teledit.com/creditcard_recurring/web\")\r",
									"})\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"위 표준페이지 시작 URL 전송 파라미터(STARTPARAMS) 정상출력\", function () {\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.undefined;\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.empty;\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"결제금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'PC',\r",
									"    TXTYPE: 'AUTH',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    CANCELURL: 'https://paytest.teledit.com:888/clientdemo/oneapi/returnFail.php',\r",
									"    RETURNURL: 'https://paytest.teledit.com:888/clientdemo/oneapi/returnFail.php',\r",
									"    ISBILL: 'Y',\r",
									"    ISNOTI: 'N'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "READY - DANALCARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"// 파싱 및 개별 디코딩\r",
									"const parsed = parseQueryString(result);\r",
									"const startUrlDecoded = safeDecodeURIComponent(parsed.STARTURL);\r",
									"console.log(\"STARTURL(디코딩):\", startUrlDecoded);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메시지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"정기결제 초기인증 표준페이지 시작 URL(STARTURL) 정상출력\", function () {\r",
									"    pm.expect(startUrlDecoded).to.eql(\"https://checkout.teledit.com/creditcard_std/web\")\r",
									"})\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"위 표준페이지 시작 URL 전송 파라미터(STARTPARAMS) 정상출력\", function () {\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.undefined;\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.empty;\r",
									"    pm.expect(parsed.STARTPARAMS).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"결제금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'PC',\r",
									"    TXTYPE: 'AUTH',\r",
									"    SERVICETYPE: 'DANALCARD',\r",
									"    CANCELURL: 'https://paytest.teledit.com:888/clientdemo/oneapi/returnFail.php',\r",
									"    RETURNURL: 'https://paytest.teledit.com:888/clientdemo/oneapi/returnFail.php',\r",
									"    ISBILL: 'Y',\r",
									"    ISNOTI: 'N'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "초기 인증 결제 요청",
			"item": [
				{
					"name": "ISSUEBILLKEY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get('TID'),\r",
									"    TXTYPE: 'ISSUEBILLKEY',\r",
									"    SERVICETYPE: 'BATCH'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"// 파싱 및 개별 디코딩\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) : 1104 출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"1104\")\r",
									"});\r",
									"\r",
									"// \"존재하지 않는 거래 입니다.\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) : 존재하지 않는 거래입니다. 출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%C1%B8%C0%E7%C7%CF%C1%F6+%BE%CA%B4%C2+%B0%C5%B7%A1+%C0%D4%B4%CF%B4%D9.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "삼성카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC250730151749FFCAA0',\r",
									"    USERNAME: '김하늘',\r",
									"    USERPHONE: '01085402697',\r",
									"    ORDERID: '01234567'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0500\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.eql(\"01085402697\")\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.eql(\"01234567\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"512028******7294\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"    pm.expect(parsed.CARDAUTHNO).to.have.lengthOf(8); \r",
									"});\r",
									"\r",
									"// \"삼성카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"%BB%EF%BC%BA%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.eql(\"%EA%B9%3F%3F%3F%3F%3F\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "현대카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC221222165535557F38'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0400\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"pm.test(\"DEPOSIT_AMT 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"403293******4003\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"});\r",
									"\r",
									"// \"현대카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"%C7%F6%B4%EB%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "신한카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC2507311547242F2CD0'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0100\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"451842******5446\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"});\r",
									"\r",
									"// \"신한카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"%BD%C5%C7%D1%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "농협카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC250731154848CB7E0E'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0800\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"542416******2144\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"});\r",
									"\r",
									"// \"NH농협카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"NH%B3%F3%C7%F9%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "국민카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC250804165745DBD04E'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0300\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"/////// 문의 필요 ///////\r",
									"pm.test(\"DEPOSIT_AMT 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"540926******6041'\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"});\r",
									"\r",
									"// \"삼성카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"KB%B1%B9%B9%CE%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "우리 BC카드",
			"item": [
				{
					"name": "정기결제 요청 (OTBILL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    ITEMNAME: 'apiautotest',\r",
									"    AMOUNT: '301',\r",
									"    CURRENCY: '410',\r",
									"    USERID: 'hnkim',\r",
									"    USERAGENT: 'ONLINE',\r",
									"    TXTYPE: 'OTBILL',\r",
									"    SERVICETYPE: 'BATCH',\r",
									"    ISREBILL: 'Y',\r",
									"    BILLINFO: 'DC25080416595836B04B'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"카드사 코드(CARDCODE 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDCODE).to.eql(\"0202\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 전화번호(USERPHONE) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.USERPHONE).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"할부 개월 수(QUOTA) 정상출력\", function () {\r",
									"    pm.expect(parsed.QUOTA).to.eql(\"00\")\r",
									"});\r",
									"\r",
									"// 현재 시간 구하기 (HHmmss)\r",
									"function getFormattedTime() {\r",
									"  const now = new Date();\r",
									"  const hours = String(now.getHours()).padStart(2, \"0\");\r",
									"  const minutes = String(now.getMinutes()).padStart(2, \"0\");\r",
									"  const seconds = String(now.getSeconds()).padStart(2, \"0\");\r",
									"\r",
									"  return `${hours}${minutes}${seconds}`;\r",
									"}\r",
									"\r",
									"const formattedTime = getFormattedTime(); // 출력: 151814 (예시)\r",
									"console.log(formattedTime)\r",
									"\r",
									"pm.test(\"매출 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(formattedTime)\r",
									"});\r",
									"\r",
									"// Environments에 TRANTIME 저장\r",
									"pm.environment.set(\"TRANTIME\", parsed.TRANTIME);\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"매출 발생일자(TRANDATE) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"상품명(ITEMNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.ITEMNAME).to.eql(\"apiautotest\")\r",
									"});\r",
									"\r",
									"/////// 문의 필요 ///////\r",
									"pm.test(\"DEPOSIT_AMT 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"});\r",
									"\r",
									"// Environments에 TID 저장\r",
									"pm.environment.set(\"TID\", parsed.TID);\r",
									"\r",
									"pm.test(\"가맹점 주문번호(ORDERID) 빈값 확인\", function () {\r",
									"    pm.expect(parsed.ORDERID).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"카드번호(CARDNO) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNO).to.eql(\"538920******1226\")\r",
									"});\r",
									"\r",
									"pm.test(\"거래 승인 번호(CARDAUTHNO) 정상출력\", function () {\r",
									"    pm.expect(Number(parsed.CARDAUTHNO)).to.be.a(\"number\")\r",
									"});\r",
									"\r",
									"// \"삼성카드\" 검증\r",
									"pm.test(\"카드사 명(CARDNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.CARDNAME).to.eql(\"%BF%EC%B8%AEBC%C4%AB%B5%E5\")\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 이름(USERNAME) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERNAME).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"구매자 ID(USERID) 정상출력\", function () {\r",
									"    pm.expect(parsed.USERID).to.eql(\"hnkim\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "카드 승인 취소 (BILLCANCEL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// 암호화 대상 데이터 (CPID 제외)\r",
									"let params = {\r",
									"    AMOUNT: '301',\r",
									"    TID: pm.environment.get(\"TID\"),\r",
									"    CANCELTYPE: 'C',\r",
									"    TXTYPE: 'CANCEL',\r",
									"    SERVICETYPE: 'DANALCARD'\r",
									"};\r",
									"\r",
									"// Step 1: URL 인코딩 (key 제외, value만)\r",
									"let encodedParams = [];\r",
									"for (let key in params) {\r",
									"    let value = encodeURIComponent(params[key]);\r",
									"    encodedParams.push(`${key}=${value}`);\r",
									"}\r",
									"\r",
									"// Step 2: QueryString 구성\r",
									"let queryString = encodedParams.join('&');\r",
									"\r",
									"// Step 3: AES256 암호화 (CBC + PKCS7)\r",
									"let encrypted = CryptoJS.AES.encrypt(queryString, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 4: Base64 → URLEncoded\r",
									"const base64Cipher = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"const finalEncoded = encodeURIComponent(base64Cipher);\r",
									"\r",
									"// Step 5: 암호화된 데이터 환경 변수 저장\r",
									"pm.environment.set(\"encryptedData\", finalEncoded);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: 응답을 텍스트로 가져옴\r",
									"let rawText = pm.response.text();\r",
									"\r",
									"// Step 2: DATA= 뒤의 암호문만 추출\r",
									"let encryptedData = rawText.split(\"DATA=\")[1];\r",
									"\r",
									"// Step 3: URI 디코딩\r",
									"let base64Cipher = decodeURIComponent(encryptedData);\r",
									"\r",
									"// Step 4: 복호화 Key / IV 설정 (Hex 형태 사용!)\r",
									"const key = CryptoJS.enc.Hex.parse(\"20ad459ab1ad2f6e541929d50d24765abb05850094a9629041bebb726814625d\");\r",
									"const iv = CryptoJS.enc.Hex.parse(\"d7d02c92cb930b661f107cb92690fc83\");\r",
									"\r",
									"// Step 5: AES 복호화\r",
									"let decrypted = CryptoJS.AES.decrypt(base64Cipher, key, {\r",
									"    iv: iv,\r",
									"    mode: CryptoJS.mode.CBC,\r",
									"    padding: CryptoJS.pad.Pkcs7\r",
									"});\r",
									"\r",
									"// Step 6: 결과를 UTF-8 문자열로 변환\r",
									"let result = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"console.log(\"복호화 결과 : \", result);\r",
									"\r",
									"// Step 7: 복호화된 데이터 환경 변수에 저장\r",
									"pm.environment.set(\"decryptedResponse\", result);\r",
									"\r",
									"\r",
									"/********************     Assertion     **********************/\r",
									"\r",
									"// Key-Value 파싱 함수\r",
									"function parseQueryString(str) {\r",
									"    return str.split(\"&\").reduce((acc, pair) => {\r",
									"        const [key, value] = pair.split(\"=\");\r",
									"        acc[key] = value || \"\";\r",
									"        return acc;\r",
									"    }, {});\r",
									"}\r",
									"\r",
									"// 안전 디코딩 함수\r",
									"function safeDecodeURIComponent(str) {\r",
									"    try {\r",
									"        return decodeURIComponent(str);\r",
									"    } catch (e) {\r",
									"        console.warn(\"decodeURIComponent 실패:\", e.message);\r",
									"        return str;\r",
									"    }\r",
									"}\r",
									"\r",
									"const parsed = parseQueryString(result);\r",
									"\r",
									"pm.test(\"결과코드(RETURNCODE) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNCODE).to.eql(\"0000\")\r",
									"});\r",
									"\r",
									"// \"성공\" 검증\r",
									"pm.test(\"결과메세지(RETURNMSG) 정상출력\", function () {\r",
									"    pm.expect(parsed.RETURNMSG).to.eql(\"%BC%BA%B0%F8\")\r",
									"});\r",
									"\r",
									"pm.test(\"취소 후 잔액(BALANCE) 정상출력\", function () {\r",
									"    pm.expect(parsed.BALANCE).to.eql(\"0\")\r",
									"});\r",
									"\r",
									"pm.test(\"다날 원 거래 키(O_TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.O_TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.O_TID).to.not.be.empty;\r",
									"    pm.expect(parsed.O_TID).to.not.be.null;\r",
									"    pm.expect(parsed.O_TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.O_TID).to.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"pm.test(\"다날 거래 키(TID) 정상출력\", function () {\r",
									"    pm.expect(parsed.TID).to.not.be.undefined;\r",
									"    pm.expect(parsed.TID).to.not.be.empty;\r",
									"    pm.expect(parsed.TID).to.not.be.null;\r",
									"    pm.expect(parsed.TID).to.have.lengthOf(24);\r",
									"    pm.expect(parsed.TID).to.not.eql(pm.environment.get(\"TID\"))\r",
									"});\r",
									"\r",
									"// 매출 발생시간과 비교 검증\r",
									"pm.test(\"승인 발생시간(TRANTIME) 정상출력\", function () {\r",
									"    pm.expect(parsed.TRANTIME).to.eql(pm.environment.get(\"TRANTIME\"))\r",
									"});\r",
									"\r",
									"// 현재 날짜 구하기 (yyyyMMdd)\r",
									"function getYYYYMMDD() {\r",
									"  const today = new Date();\r",
									"  const yyyy = today.getFullYear();\r",
									"  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 1을 더하고 2자리로 만듦\r",
									"  const dd = String(today.getDate()).padStart(2, \"0\");   // 2자리로 만듦\r",
									"\r",
									"  return `${yyyy}${mm}${dd}`;\r",
									"}\r",
									"\r",
									"const formattedDate = getYYYYMMDD(); // 출력: 20230730 (예시) \r",
									"\r",
									"pm.test(\"승인 발생일자(TRANDATE)\", function () {\r",
									"    pm.expect(parsed.TRANDATE).to.eql(formattedDate)\r",
									"});\r",
									"\r",
									"pm.test(\"승인 취소 금액(AMOUNT) 정상출력\", function () {\r",
									"    pm.expect(parsed.AMOUNT).to.eql(\"301\")\r",
									"});\r",
									"\r",
									"pm.test(\"컵 보증금(DEPOSIT_AMT) 정상출력\", function () {\r",
									"    pm.expect(parsed.DEPOSIT_AMT).to.eql(\"0\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tx-credit}}?CPID=A010037544&DATA={{encryptedData}}",
							"host": [
								"{{tx-credit}}"
							],
							"query": [
								{
									"key": "CPID",
									"value": "A010037544"
								},
								{
									"key": "DATA",
									"value": "{{encryptedData}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}